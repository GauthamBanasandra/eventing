// Code generated by protoc-gen-go. DO NOT EDIT.
// source: evaluator.proto

package nftp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	WorkersPerNode       uint32   `protobuf:"varint,1,opt,name=WorkersPerNode,proto3" json:"WorkersPerNode,omitempty"`
	ThreadsPerWorker     uint32   `protobuf:"varint,2,opt,name=ThreadsPerWorker,proto3" json:"ThreadsPerWorker,omitempty"`
	NsServerUrl          string   `protobuf:"bytes,3,opt,name=NsServerUrl,proto3" json:"NsServerUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_583627eb4593efb1, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetWorkersPerNode() uint32 {
	if m != nil {
		return m.WorkersPerNode
	}
	return 0
}

func (m *Config) GetThreadsPerWorker() uint32 {
	if m != nil {
		return m.ThreadsPerWorker
	}
	return 0
}

func (m *Config) GetNsServerUrl() string {
	if m != nil {
		return m.NsServerUrl
	}
	return ""
}

type Info struct {
	IsFatal              bool     `protobuf:"varint,1,opt,name=IsFatal,proto3" json:"IsFatal,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_583627eb4593efb1, []int{1}
}

func (m *Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Info.Unmarshal(m, b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Info.Marshal(b, m, deterministic)
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return xxx_messageInfo_Info.Size(m)
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetIsFatal() bool {
	if m != nil {
		return m.IsFatal
	}
	return false
}

func (m *Info) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Void struct {
	Value                uint32   `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_583627eb4593efb1, []int{2}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func (m *Void) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Port struct {
	EvaluatorId          string   `protobuf:"bytes,1,opt,name=EvaluatorId,proto3" json:"EvaluatorId,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_583627eb4593efb1, []int{3}
}

func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetEvaluatorId() string {
	if m != nil {
		return m.EvaluatorId
	}
	return ""
}

func (m *Port) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Function struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Function) Reset()         { *m = Function{} }
func (m *Function) String() string { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()    {}
func (*Function) Descriptor() ([]byte, []int) {
	return fileDescriptor_583627eb4593efb1, []int{4}
}

func (m *Function) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Function.Unmarshal(m, b)
}
func (m *Function) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Function.Marshal(b, m, deterministic)
}
func (m *Function) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Function.Merge(m, src)
}
func (m *Function) XXX_Size() int {
	return xxx_messageInfo_Function.Size(m)
}
func (m *Function) XXX_DiscardUnknown() {
	xxx_messageInfo_Function.DiscardUnknown(m)
}

var xxx_messageInfo_Function proto.InternalMessageInfo

func (m *Function) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Function) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Log struct {
	EvaluatorID          string   `protobuf:"bytes,1,opt,name=EvaluatorID,proto3" json:"EvaluatorID,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_583627eb4593efb1, []int{5}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetEvaluatorID() string {
	if m != nil {
		return m.EvaluatorID
	}
	return ""
}

func (m *Log) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Params struct {
	FunctionID           string   `protobuf:"bytes,1,opt,name=FunctionID,proto3" json:"FunctionID,omitempty"`
	FunctionName         string   `protobuf:"bytes,2,opt,name=FunctionName,proto3" json:"FunctionName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_583627eb4593efb1, []int{6}
}

func (m *Params) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Params.Unmarshal(m, b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Params.Marshal(b, m, deterministic)
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return xxx_messageInfo_Params.Size(m)
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFunctionID() string {
	if m != nil {
		return m.FunctionID
	}
	return ""
}

func (m *Params) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "nftp.Config")
	proto.RegisterType((*Info)(nil), "nftp.Info")
	proto.RegisterType((*Void)(nil), "nftp.Void")
	proto.RegisterType((*Port)(nil), "nftp.Port")
	proto.RegisterType((*Function)(nil), "nftp.Function")
	proto.RegisterType((*Log)(nil), "nftp.Log")
	proto.RegisterType((*Params)(nil), "nftp.Params")
}

func init() { proto.RegisterFile("evaluator.proto", fileDescriptor_583627eb4593efb1) }

var fileDescriptor_583627eb4593efb1 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xc1, 0xef, 0xd2, 0x30,
	0x14, 0xce, 0x60, 0x4e, 0xf6, 0x40, 0x24, 0x8d, 0x87, 0xc5, 0x18, 0x25, 0x0d, 0x21, 0xe8, 0x61,
	0x07, 0x3c, 0x69, 0xbc, 0x18, 0x26, 0xc9, 0x92, 0xb1, 0x90, 0x29, 0x78, 0xae, 0xac, 0x9b, 0x8d,
	0x63, 0x25, 0x5d, 0x21, 0xd1, 0x83, 0x27, 0xff, 0x70, 0xd3, 0x76, 0xe5, 0x37, 0x7e, 0xdc, 0xde,
	0xf7, 0xf5, 0x7b, 0x7d, 0xdf, 0xfb, 0x5a, 0x78, 0x4e, 0x2f, 0xa4, 0x3a, 0x13, 0xc9, 0x45, 0x78,
	0x12, 0x5c, 0x72, 0xe4, 0xd6, 0x85, 0x3c, 0xe1, 0xbf, 0xe0, 0xad, 0x78, 0x5d, 0xb0, 0x12, 0xcd,
	0x61, 0xfc, 0x9d, 0x8b, 0x5f, 0x54, 0x34, 0x5b, 0x2a, 0x52, 0x9e, 0xd3, 0xc0, 0x99, 0x3a, 0x8b,
	0x67, 0xd9, 0x23, 0x16, 0xbd, 0x83, 0xc9, 0xb7, 0x9f, 0x82, 0x92, 0x5c, 0x31, 0xe6, 0x2c, 0xe8,
	0x69, 0xe5, 0x1d, 0x8f, 0xa6, 0x30, 0x4c, 0x9b, 0xaf, 0x54, 0x5c, 0xa8, 0xd8, 0x89, 0x2a, 0xe8,
	0x4f, 0x9d, 0x85, 0x9f, 0x75, 0x29, 0xfc, 0x11, 0xdc, 0xb8, 0x2e, 0x38, 0x0a, 0xe0, 0x69, 0xdc,
	0xac, 0x89, 0x24, 0x95, 0x1e, 0x3b, 0xc8, 0x2c, 0x54, 0x27, 0x1b, 0xda, 0x34, 0xa4, 0xa4, 0x7a,
	0x8c, 0x9f, 0x59, 0x88, 0x5f, 0x81, 0xbb, 0xe7, 0x2c, 0x47, 0x2f, 0xe0, 0xc9, 0x9e, 0x54, 0x67,
	0x6b, 0xd8, 0x00, 0xfc, 0x09, 0xdc, 0x2d, 0x17, 0x52, 0x79, 0xf8, 0x62, 0x57, 0x8f, 0x73, 0xad,
	0xf1, 0xb3, 0x2e, 0x85, 0x90, 0x51, 0xb6, 0x5b, 0xe8, 0x1a, 0x87, 0x30, 0x58, 0x9f, 0xeb, 0x83,
	0x64, 0xbc, 0x46, 0x63, 0xe8, 0xc5, 0x51, 0xdb, 0xd8, 0x8b, 0x23, 0xa5, 0x5f, 0xa9, 0x7c, 0x8c,
	0x1d, 0x5d, 0xe3, 0x0f, 0xd0, 0x4f, 0x78, 0x79, 0x3b, 0x2c, 0xba, 0x1f, 0x16, 0xa1, 0x09, 0xf4,
	0x37, 0x4d, 0xd9, 0xf6, 0xaa, 0x12, 0x27, 0xe0, 0x6d, 0x89, 0x20, 0xc7, 0x06, 0xbd, 0x06, 0xb0,
	0x43, 0xaf, 0xcd, 0x1d, 0x06, 0x61, 0x18, 0x59, 0x94, 0x92, 0xa3, 0x35, 0x70, 0xc3, 0x2d, 0x77,
	0x30, 0x4a, 0xb9, 0x64, 0x05, 0x3b, 0x10, 0x6d, 0x7e, 0x06, 0xa0, 0xf1, 0x6f, 0x1d, 0x06, 0x84,
	0xea, 0xd5, 0x43, 0x55, 0xbf, 0x6c, 0x6b, 0x1d, 0xe1, 0x1b, 0xf0, 0x12, 0x5e, 0x96, 0x54, 0x20,
	0xdf, 0xb0, 0x09, 0x2f, 0xbb, 0x82, 0xe5, 0x3f, 0x07, 0xfc, 0xeb, 0x1a, 0x68, 0x0e, 0x10, 0xd7,
	0x4c, 0x32, 0x52, 0xb1, 0x3f, 0x14, 0x8d, 0x8c, 0xce, 0xfc, 0x23, 0xdb, 0xa5, 0x5f, 0xf5, 0x2d,
	0x0c, 0x3f, 0xe7, 0xf9, 0x43, 0x90, 0xe6, 0xc8, 0xe2, 0x1b, 0xe9, 0x0c, 0x06, 0xed, 0xfd, 0xd7,
	0x0b, 0x4d, 0x2a, 0x5d, 0xd5, 0x0f, 0x4f, 0xff, 0xdd, 0xf7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x1b, 0x4d, 0xfc, 0xcf, 0xce, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationClient interface {
	NotifyPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Void, error)
	Logger(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Void, error)
}

type notificationClient struct {
	cc *grpc.ClientConn
}

func NewNotificationClient(cc *grpc.ClientConn) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) NotifyPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/nftp.Notification/NotifyPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) Logger(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/nftp.Notification/Logger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServer is the server API for Notification service.
type NotificationServer interface {
	NotifyPort(context.Context, *Port) (*Void, error)
	Logger(context.Context, *Log) (*Void, error)
}

func RegisterNotificationServer(s *grpc.Server, srv NotificationServer) {
	s.RegisterService(&_Notification_serviceDesc, srv)
}

func _Notification_NotifyPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).NotifyPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftp.Notification/NotifyPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).NotifyPort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_Logger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).Logger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftp.Notification/Logger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).Logger(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nftp.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyPort",
			Handler:    _Notification_NotifyPort_Handler,
		},
		{
			MethodName: "Logger",
			Handler:    _Notification_Logger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evaluator.proto",
}

// EvaluatorClient is the client API for Evaluator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EvaluatorClient interface {
	Initialize(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Info, error)
	AddFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Info, error)
	Evaluate(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Info, error)
}

type evaluatorClient struct {
	cc *grpc.ClientConn
}

func NewEvaluatorClient(cc *grpc.ClientConn) EvaluatorClient {
	return &evaluatorClient{cc}
}

func (c *evaluatorClient) Initialize(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/nftp.Evaluator/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatorClient) AddFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/nftp.Evaluator/AddFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatorClient) Evaluate(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/nftp.Evaluator/Evaluate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvaluatorServer is the server API for Evaluator service.
type EvaluatorServer interface {
	Initialize(context.Context, *Config) (*Info, error)
	AddFunction(context.Context, *Function) (*Info, error)
	Evaluate(context.Context, *Params) (*Info, error)
}

func RegisterEvaluatorServer(s *grpc.Server, srv EvaluatorServer) {
	s.RegisterService(&_Evaluator_serviceDesc, srv)
}

func _Evaluator_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatorServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftp.Evaluator/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatorServer).Initialize(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evaluator_AddFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Function)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatorServer).AddFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftp.Evaluator/AddFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatorServer).AddFunction(ctx, req.(*Function))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evaluator_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatorServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftp.Evaluator/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatorServer).Evaluate(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

var _Evaluator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nftp.Evaluator",
	HandlerType: (*EvaluatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _Evaluator_Initialize_Handler,
		},
		{
			MethodName: "AddFunction",
			Handler:    _Evaluator_AddFunction_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _Evaluator_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evaluator.proto",
}
